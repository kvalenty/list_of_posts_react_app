{"version":3,"sources":["constants.ts","components/api/api.ts","redux/actions.ts","redux/actionTypes.ts","components/EditPost/EditPost.tsx","components/PostItem/PostItemCardContent.tsx","components/PostItem/CommentsList.tsx","components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","components/AddPost/AddPost.tsx","App.tsx","serviceWorker.ts","redux/postsReducer.ts","redux/rootReducer.ts","index.tsx"],"names":["POSTS_URL","myHeaders","Headers","append","loadOptions","method","headers","redirect","uploadOptions","raw","body","loadData","url","options","a","fetch","responsed","json","preparedPosts","posts","comments","map","post","filter","comment","postId","id","loadPosts","dispatch","preparedList","type","payload","uploadPost","title","JSON","stringify","then","response","text","catch","error","console","removePost","connector","connect","state","props","useDispatch","editPostHandle","useState","setTitle","setBody","Form","className","onSubmit","event","preventDefault","trim","updatePostHandle","Group","controlId","Label","Control","placeholder","value","onChange","target","ButtonGroup","Button","variant","onClick","PostItemCardContent","Card","Title","Text","CommentsList","ListGroup","ListGroupItem","key","isEdit","setIsEdit","isVisibleComments","setIsVisibleComments","quantityComments","length","Body","window","confirm","disabled","Footer","lastId","block","useEffect","AddPost","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","action","updatedPosts","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.559703c3.chunk.js","sourcesContent":["export const POSTS_URL = 'https://bloggy-api.herokuapp.com/posts';\nexport const COMMENTS_URL = 'https://bloggy-api.herokuapp.com/comments';\nexport const REMOVE_URL = 'https://bloggy-api.herokuapp.com/posts/';\n","import { Dispatch } from 'redux';\nimport { loadedPosts } from '../../redux/actions';\nimport { Comment, Post } from '../../interfaces/interfaces';\nimport { POSTS_URL, COMMENTS_URL, REMOVE_URL } from '../../constants';\n\nconst myHeaders = new Headers();\n\nmyHeaders.append('Content-Type', 'application/json');\n\nconst loadOptions = (): RequestInit => ({\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow',\n});\nconst uploadOptions = (raw: string): RequestInit => ({\n  method: 'POST',\n  headers: myHeaders,\n  body: raw,\n  redirect: 'follow',\n});\n\nconst removeOptions = (): RequestInit => ({\n  method: 'DELETE',\n  headers: myHeaders,\n  // body: new FormData(),\n  redirect: 'follow',\n});\n\nconst loadData = async <T>(url: string, options: RequestInit): Promise<T[]> => {\n  const responsed = await fetch(url, options);\n\n  return responsed.json();\n};\n\nconst preparedPosts = (posts: Post[], comments: Comment[]) => {\n  const preparedList = posts.map(post => ({\n    ...post,\n    comments: comments.filter(comment => comment.postId === post.id),\n  }));\n\n  return preparedList;\n};\n\nexport const loadPosts = async (dispatch: Dispatch) => {\n  const posts = await loadData<Post>(POSTS_URL, loadOptions());\n  const comments = await loadData<Comment>(COMMENTS_URL, loadOptions());\n\n  const preparedList = preparedPosts(posts, comments);\n\n  dispatch(loadedPosts(preparedList));\n};\n\nexport const uploadPost = async (title: string, body: string) => {\n  const raw = JSON.stringify({ title, body });\n\n  fetch(POSTS_URL, uploadOptions(raw))\n    .then(response => response.text())\n    .catch(error => console.error(error));\n};\n\nexport const removePost = async (id: number) => {\n  fetch(`${REMOVE_URL}${id}`, removeOptions())\n    .then(response => response.text())\n    .catch(error => console.error(error));\n};\n","import { Action, Post } from '../interfaces/interfaces';\nimport {\n  LOAD_POSTS,\n  REMOVE_POST,\n  ADD_POST,\n  UPDATE_POST,\n} from './actionTypes';\n\nexport const loadedPosts = (payload: Post[]): Action => {\n  return {\n    type: LOAD_POSTS,\n    payload,\n  };\n};\n\nexport const deletePost = (payload: number): Action => {\n  return {\n    type: REMOVE_POST,\n    payload,\n  };\n};\n\nexport const addPost = (payload: Post): Action => {\n  return {\n    type: ADD_POST,\n    payload,\n  };\n};\n\nexport const updatePost = (payload: Post): Action => {\n  return {\n    type: UPDATE_POST,\n    payload,\n  };\n};\n","export const LOAD_POSTS = 'POSTS/LOAD_POSTS';\nexport const REMOVE_POST = 'POSTS/REMOVE_POST';\nexport const ADD_POST = 'POSTS/ADD_POST';\nexport const UPDATE_POST = 'POSTS/UPDATE_POST';\n","import React, { useState, ChangeEvent, SyntheticEvent } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Post, RootState } from '../../interfaces/interfaces';\nimport { uploadPost } from '../api/api';\nimport { updatePost } from '../../redux/actions';\n\nconst mapStateToProps = (state: RootState) => state;\n\nconst connector = connect(mapStateToProps);\n\ntype Props = {\n  post: Post;\n  editPostHandle: () => void;\n};\n\nconst EditPost = (props: Props) => {\n  const dispatch = useDispatch();\n  const { post, editPostHandle } = props;\n  const [title, setTitle] = useState(post.title);\n  const [body, setBody] = useState(post.body);\n\n  const titleOnChangeHandle = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitle(value);\n  };\n\n  const textOnChangeHandle = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setBody(value);\n  };\n\n  const updatePostHandle = (event: SyntheticEvent) => {\n    event.preventDefault();\n\n    if (title.trim() && body.trim()) {\n      uploadPost(title, body);\n      dispatch(updatePost({ id: post.id, title, body }));\n      setTitle('');\n      setBody('');\n    }\n  };\n\n  return (\n    <Form\n      className=\"p-4\"\n      onSubmit={(event) => {\n        updatePostHandle(event);\n        editPostHandle();\n      }}\n    >\n      <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>Title</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter new title\"\n          value={title}\n          onChange={titleOnChangeHandle}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicPassword\">\n        <Form.Label>Text of post</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter your post\"\n          value={body}\n          onChange={textOnChangeHandle}\n        />\n      </Form.Group>\n      <ButtonGroup>\n        <Button variant=\"success\" type=\"submit\">\n          Submit\n        </Button>\n        <Button\n          onClick={editPostHandle}\n          variant=\"secondary\"\n          type=\"submit\"\n        >\n          Cencel\n        </Button>\n      </ButtonGroup>\n    </Form>\n  );\n};\n\nexport default connector(EditPost);\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\ninterface Props {\n  title: string;\n  body: string;\n}\n\nexport const PostItemCardContent = (props: Props) => {\n  return (\n    <>\n      <Card.Title>{props.title}</Card.Title>\n      <Card.Text>\n        {props.body}\n      </Card.Text>\n    </>\n  );\n};\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport { Comment } from '../../interfaces/interfaces';\n\ninterface Props {\n  comments: Comment[] | undefined;\n}\n\nexport const CommentsList = (props: Props) => {\n  const { comments } = props;\n\n  return (\n    <ListGroup className=\"flush m-2\">\n      {comments?.map(comment => (\n        <ListGroupItem key={comment.id}>\n          {comment.body}\n        </ListGroupItem>\n      ))}\n    </ListGroup>\n  );\n};\n","import React, { useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { Post, RootState } from '../../interfaces/interfaces';\nimport { removePost } from '../api/api';\nimport { deletePost } from '../../redux/actions';\nimport EditPost from '../EditPost/EditPost';\nimport { PostItemCardContent } from './PostItemCardContent';\nimport { CommentsList } from './CommentsList';\n\nconst mapStateToProps = (state: RootState) => state;\n\nconst connector = connect(mapStateToProps);\n\ntype Props = {\n  post: Post;\n};\n\nconst PostItem = (props: Props) => {\n  const { post } = props;\n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n  const [isVisibleComments, setIsVisibleComments] = useState(false);\n  const quantityComments = post.comments?.length;\n\n  const removePostHandle = () => {\n    const confirm = window.confirm('Are you sure?');\n\n    if (confirm) {\n      removePost(post.id);\n      dispatch(deletePost(post.id));\n    }\n  };\n\n  const editPostHandle = () => setIsEdit(!isEdit);\n  const toggleCommentsHandle = () => setIsVisibleComments(!isVisibleComments);\n\n  return (\n    <Card className=\"text-center m-3\">\n      <Card.Body>\n        {isEdit && <EditPost post={post} editPostHandle={editPostHandle} />}\n        {!isEdit && <PostItemCardContent title={post.title} body={post.body} />}\n        {isVisibleComments && <CommentsList comments={post.comments} />}\n        <Button variant=\"danger\" onClick={removePostHandle}>Delete</Button>\n        <Button variant=\"warning\" onClick={editPostHandle} disabled={isEdit}>Edit</Button>\n        <Button variant=\"info\" onClick={toggleCommentsHandle} disabled={!quantityComments}>Comments</Button>\n      </Card.Body>\n      <Card.Footer className=\"text-muted\">\n        {`Comments: ${quantityComments}`}\n      </Card.Footer>\n    </Card>\n  );\n};\n\nexport default connector(PostItem);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { RootState, Posts } from '../../interfaces/interfaces';\nimport PostItem from '../PostItem/PostItem';\n\nconst mapStateToProps = (state: RootState) => state;\n\nconst connector = connect(mapStateToProps);\n\ntype Props = ConnectedProps<typeof connector> & {\n  dispatch: Dispatch;\n  posts: Posts;\n};\n\nconst PostsList = (props: Props) => {\n  const { posts: { posts } } = props;\n\n  return (\n    <>\n      {posts.map((post) => (\n        <PostItem post={post} key={post.id} />\n      ))}\n    </>\n  );\n};\n\nexport default connector(PostsList);\n","import React, { SyntheticEvent, useState, ChangeEvent } from 'react';\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { RootState, Posts } from '../../interfaces/interfaces';\nimport { uploadPost } from '../api/api';\nimport { addPost } from '../../redux/actions';\n\nconst mapStateToProps = (state: RootState) => state;\n\nconst connector = connect(mapStateToProps);\n\ntype Props = ConnectedProps<typeof connector> & {\n  dispatch: Dispatch;\n  posts: Posts;\n};\n\nconst PostsList = (props: Props) => {\n  const dispatch = useDispatch();\n  const { posts: { posts } } = props;\n  let lastId = 0;\n\n  if (posts.length > 0) {\n    lastId = posts[posts.length - 1].id;\n  }\n\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n\n  const titleOnChangeHandle = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitle(value);\n  };\n\n  const textOnChangeHandle = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setBody(value);\n  };\n\n  const addPostHandle = (event: SyntheticEvent) => {\n    event.preventDefault();\n\n    if (title.trim() && body.trim()) {\n      uploadPost(title, body);\n      dispatch(addPost({ id: lastId + 1, title, body }));\n      setTitle('');\n      setBody('');\n    }\n  };\n\n  return (\n    <>\n      <Form className=\"p-4\" onSubmit={addPostHandle}>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Title</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter new title\"\n            value={title}\n            onChange={titleOnChangeHandle}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Text of post</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter your post\"\n            value={body}\n            onChange={textOnChangeHandle}\n          />\n        </Form.Group>\n        <Button variant=\"success\" type=\"submit\" block>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default connector(PostsList);\n","import React, { useEffect } from 'react';\nimport { useDispatch, connect } from 'react-redux';\nimport { loadPosts } from './components/api/api';\nimport { RootState } from './interfaces/interfaces';\nimport PostsList from './components/PostsList/PostsList';\nimport AddPost from './components/AddPost/AddPost';\n\nconst mapStateToProps = (state: RootState) => state;\n\nconst connector = connect(mapStateToProps);\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    loadPosts(dispatch);\n  }, [dispatch]);\n\n  return (\n    <>\n      <AddPost />\n      <PostsList />\n    </>\n  );\n};\n\nexport default connector(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Action, Post } from '../interfaces/interfaces';\nimport {\n  LOAD_POSTS,\n  REMOVE_POST,\n  ADD_POST,\n  UPDATE_POST,\n} from './actionTypes';\n\ninterface InitialState {\n  posts: Post[];\n}\n\nconst initialState: InitialState = {\n  posts: [],\n};\n\nexport const postsReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_POSTS: {\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    }\n\n    case ADD_POST: {\n      return {\n        ...state,\n        posts: [...state.posts, action.payload],\n      };\n    }\n\n    case UPDATE_POST: {\n      const { id } = action.payload;\n      const updatedPosts = state.posts.map(post => {\n        if (id === post.id) {\n          return action.payload;\n        }\n\n        return post;\n      });\n\n      return {\n        ...state,\n        posts: updatedPosts,\n      };\n    }\n\n    case REMOVE_POST: {\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.id !== action.payload),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { postsReducer } from './postsReducer';\n\nexport const rootReducer = combineReducers({\n  posts: postsReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { rootReducer } from './redux/rootReducer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk),\n));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}